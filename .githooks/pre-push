#!/bin/bash
# N0DE Platform - Pre-Push Deployment Gate
# Ensures deployments won't break production

set -e

echo "üö¶ N0DE Pre-Push Deployment Gate"
echo "================================"

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

CRITICAL_CHECKS_PASSED=0
TOTAL_CRITICAL_CHECKS=5

log_critical() {
  echo -e "${BLUE}üéØ CRITICAL: $1${NC}"
}

log_success() {
  echo -e "${GREEN}‚úÖ $1${NC}"
  ((CRITICAL_CHECKS_PASSED++))
}

log_warning() {
  echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
  echo -e "${RED}‚ùå $1${NC}"
}

# Get push information
remote=$1
url=$2

# Read from stdin to get the list of revisions
while read local_ref local_sha remote_ref remote_sha; do
  if [ "$local_sha" = "0000000000000000000000000000000000000000" ]; then
    # Branch being deleted
    continue
  fi
  
  if [ "$remote_sha" = "0000000000000000000000000000000000000000" ]; then
    # New branch
    range="$local_sha"
  else
    # Updated branch
    range="$remote_sha..$local_sha"
  fi

  # Check if pushing to main branch
  if [[ "$remote_ref" == "refs/heads/main" ]]; then
    echo -e "${YELLOW}üö® PUSHING TO MAIN BRANCH - Enhanced checks enabled${NC}"
    ENHANCED_CHECKS=true
  else
    ENHANCED_CHECKS=false
  fi

  # 1. CRITICAL: Comprehensive test suite
  log_critical "Running comprehensive test suite"
  
  # Backend tests
  if npm test >/dev/null 2>&1; then
    log_success "Backend tests passed"
  else
    log_error "Backend tests failed"
    echo "Run 'npm test' to see failing tests"
    exit 1
  fi

  # Frontend build test
  cd frontend
  if npm run build >/dev/null 2>&1; then
    log_success "Frontend build successful"
  else
    log_error "Frontend build failed"
    echo "Run 'npm run build' in frontend/ to see build errors"
    exit 1
  fi
  cd ..

  # 2. CRITICAL: Backend health verification
  log_critical "Verifying backend health"
  
  # Build backend
  if npm run build >/dev/null 2>&1; then
    # Quick smoke test - start backend and check health
    if timeout 15 npm run start:prod >/dev/null 2>&1 & then
      sleep 5
      if curl -s http://localhost:3001/health | grep -q "ok"; then
        log_success "Backend health check passed"
        pkill -f "node dist/backend/main.js" 2>/dev/null || true
      else
        log_error "Backend health check failed"
        pkill -f "node dist/backend/main.js" 2>/dev/null || true
        exit 1
      fi
    else
      log_error "Backend failed to start"
      exit 1  
    fi
  else
    log_error "Backend build failed"
    exit 1
  fi

  # 3. CRITICAL: Database migration safety
  log_critical "Checking database migration safety"
  
  if git diff --name-only $range | grep -q "prisma/schema.prisma"; then
    echo "üóÑÔ∏è  Database schema changes detected"
    
    # Validate schema syntax
    if npx prisma validate >/dev/null 2>&1; then
      log_success "Database schema valid"
      
      # Check for potentially breaking changes
      SCHEMA_CHANGES=$(git diff $range -- prisma/schema.prisma)
      if echo "$SCHEMA_CHANGES" | grep -E "^\-.*model|^\-.*field" >/dev/null; then
        log_warning "Breaking database schema changes detected"
        echo "Review migration impact before deploying to production"
      fi
    else
      log_error "Invalid database schema"
      npx prisma validate
      exit 1
    fi
  else
    log_success "No database schema changes"
  fi

  # 4. CRITICAL: Security vulnerability scan
  log_critical "Running security vulnerability scan"
  
  # Check for known vulnerabilities
  if npm audit --audit-level high >/dev/null 2>&1; then
    log_success "No high-severity vulnerabilities"
  else
    log_warning "High-severity vulnerabilities found"
    echo "Run 'npm audit' to review security issues"
    
    if [ "$ENHANCED_CHECKS" = true ]; then
      log_error "Cannot push to main with security vulnerabilities"
      exit 1
    fi
  fi

  # 5. CRITICAL: API endpoint validation
  log_critical "Validating API endpoint changes"
  
  API_CHANGES=$(git diff --name-only $range | grep -E "(controller|route)" || true)
  if [ -n "$API_CHANGES" ]; then
    echo "üîå API changes detected, validating endpoints..."
    
    # Check for proper DTO validation
    if git diff $range -- $API_CHANGES | grep -E "@IsNotEmpty|@IsString|@IsNumber" >/dev/null; then
      log_success "Input validation present in API changes"
    else
      log_warning "Missing input validation in API changes"
    fi
    
    # Check for proper error handling
    if git diff $range -- $API_CHANGES | grep -E "try.*catch|HttpException" >/dev/null; then
      log_success "Error handling present in API changes"
    else
      log_warning "Consider adding error handling to API changes"
    fi
  else
    log_success "No breaking API changes detected"
  fi

  # Enhanced checks for main branch
  if [ "$ENHANCED_CHECKS" = true ]; then
    echo ""
    echo -e "${YELLOW}üîí MAIN BRANCH - Enhanced Production Checks${NC}"
    echo "============================================="
    
    # End-to-end test simulation
    log_step "Running critical user flows"
    
    # Test auth flow
    if timeout 30 node tests/test-auth-flow.js >/dev/null 2>&1; then
      log_success "Authentication flow validated"
    else
      log_warning "Auth flow test failed or timed out"
    fi
    
    # Test payment flow
    if timeout 30 node tests/payment-flows.spec.js >/dev/null 2>&1; then
      log_success "Payment flow validated"  
    else
      log_warning "Payment flow test failed or timed out"
    fi

    # Check deployment readiness
    log_step "Checking deployment readiness"
    
    # Verify environment variables
    if [ -f "frontend/.env.production" ] && [ -f ".env.production" ]; then
      log_success "Production environment files present"
    else
      log_warning "Missing production environment configuration"
    fi
    
    # Verify SSL certificates (if applicable)
    if openssl x509 -in nginx/ssl/n0de.pro.crt -text -noout >/dev/null 2>&1; then
      log_success "SSL certificates valid"
    else
      log_warning "SSL certificates not found or invalid"
    fi
  fi

  # 6. Performance impact assessment  
  log_step "Assessing performance impact"
  
  if [ -n "$FRONTEND_FILES" ]; then
    # Quick bundle size check
    cd frontend
    BUILD_OUTPUT=$(npm run build 2>&1)
    
    # Check for bundle size warnings
    if echo "$BUILD_OUTPUT" | grep -E "(Large.*bundle|exceeds.*recommended)" >/dev/null; then
      log_warning "Bundle size impact detected"
      echo "Consider implementing code splitting for large components"
    else
      echo "üì¶ Bundle size impact: minimal"
    fi
    cd ..
  fi

  # Run Performance Guardian quick check
  if [ -f ".claude/agents/performance-guardian.js" ]; then
    if timeout 30 node .claude/agents/performance-guardian.js quick >/dev/null 2>&1; then
      echo "‚ö° Performance check: passed"
    else
      log_warning "Performance check failed or timed out"
    fi
  fi

  # Final summary
  echo ""
  echo "üìä Pre-Push Summary"
  echo "=================="
  echo -e "${GREEN}‚úÖ Critical checks passed: $CRITICAL_CHECKS_PASSED/$TOTAL_CRITICAL_CHECKS${NC}"
  
  if [ ${#FIXES_APPLIED[@]} -gt 0 ]; then
    echo -e "${YELLOW}üîß Auto-fixes applied:${NC}"
    printf '%s\n' "${FIXES_APPLIED[@]}" | sed 's/^/  /'
  fi
  
  if [ ${#WARNINGS[@]} -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warnings to review:${NC}"
    printf '%s\n' "${WARNINGS[@]}" | sed 's/^/  /'
  fi

  # Gate decision
  if [ "$CRITICAL_CHECKS_PASSED" -eq "$TOTAL_CRITICAL_CHECKS" ]; then
    echo ""
    echo -e "${GREEN}üöÄ PUSH APPROVED - All critical checks passed${NC}"
    
    if [ "$ENHANCED_CHECKS" = true ]; then
      echo -e "${BLUE}üì¢ Deployment will trigger automatically after push${NC}"
      echo "   Monitor: https://www.n0de.pro"
      echo "   Backend: https://api.n0de.pro/health"
    fi
    
    exit 0
  else
    echo ""
    log_error "PUSH BLOCKED - Critical checks failed ($CRITICAL_CHECKS_PASSED/$TOTAL_CRITICAL_CHECKS)"
    echo "Fix the issues above before pushing"
    exit 1
  fi

done
#!/bin/bash
# N0DE Platform - Intelligent Pre-Commit Hook
# Validates code quality, type safety, and security before commits

set -e

echo "üöÄ N0DE Pre-Commit Intelligence Hook"
echo "===================================="

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Track what we fix automatically
FIXES_APPLIED=()
CHECKS_PASSED=()
WARNINGS=()

# Helper function for colored output
log_step() {
  echo -e "${BLUE}üìç $1${NC}"
}

log_success() {
  echo -e "${GREEN}‚úÖ $1${NC}"
  CHECKS_PASSED+=("$1")
}

log_warning() {
  echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
  WARNINGS+=("$1")
}

log_error() {
  echo -e "${RED}‚ùå $1${NC}"
}

auto_fix() {
  echo -e "${YELLOW}üîß Auto-fixing: $1${NC}"
  FIXES_APPLIED+=("$1")
}

# 1. Check if we're on the right branch
log_step "Checking branch status"
CURRENT_BRANCH=$(git branch --show-current)
if [ "$CURRENT_BRANCH" = "main" ]; then
  log_warning "Committing directly to main branch"
else
  log_success "Working on feature branch: $CURRENT_BRANCH"
fi

# 2. Validate staged files
log_step "Validating staged files"
STAGED_FILES=$(git diff --cached --name-only)
if [ -z "$STAGED_FILES" ]; then
  log_error "No files staged for commit"
  exit 1
fi

BACKEND_FILES=$(echo "$STAGED_FILES" | grep "^backend/" || true)
FRONTEND_FILES=$(echo "$STAGED_FILES" | grep "^frontend/" || true)

echo "üìÅ Files to commit:"
echo "$STAGED_FILES" | sed 's/^/  /'

# 3. Security scan for sensitive data
log_step "Scanning for sensitive data"
if echo "$STAGED_FILES" | xargs git diff --cached | grep -E -i "(password|secret|key|token).*=.*['\"][^'\"]{8,}" >/dev/null; then
  log_error "Potential secrets detected in staged files"
  echo "Please review and remove any exposed credentials"
  exit 1
else
  log_success "No exposed secrets detected"
fi

# 4. Auto-fix formatting issues
if [ -n "$BACKEND_FILES" ] || [ -n "$FRONTEND_FILES" ]; then
  log_step "Auto-fixing code formatting"
  
  # Backend formatting
  if [ -n "$BACKEND_FILES" ]; then
    auto_fix "Backend TypeScript formatting"
    npm run format >/dev/null 2>&1 || log_warning "Backend formatting failed"
  fi
  
  # Frontend formatting  
  if [ -n "$FRONTEND_FILES" ]; then
    auto_fix "Frontend code formatting"
    cd frontend
    npx prettier --write $(echo "$FRONTEND_FILES" | sed 's|^frontend/||') >/dev/null 2>&1 || log_warning "Frontend formatting failed"
    cd ..
  fi
  
  # Re-add auto-fixed files
  if [ ${#FIXES_APPLIED[@]} -gt 0 ]; then
    git add .
    echo "üîß Re-staging auto-fixed files"
  fi
fi

# 5. TypeScript type checking
if [ -n "$BACKEND_FILES" ]; then
  log_step "Checking backend TypeScript types"
  if npm run build >/dev/null 2>&1; then
    log_success "Backend TypeScript types valid"
  else
    log_error "Backend TypeScript errors found"
    npm run build
    exit 1
  fi
fi

if [ -n "$FRONTEND_FILES" ]; then
  log_step "Checking frontend TypeScript types"
  cd frontend
  if npx tsc --noEmit >/dev/null 2>&1; then
    log_success "Frontend TypeScript types valid"
  else
    log_error "Frontend TypeScript errors found"
    npx tsc --noEmit
    exit 1
  fi
  cd ..
fi

# 6. Lint checks
if [ -n "$BACKEND_FILES" ]; then
  log_step "Running backend linting"
  if npm run lint >/dev/null 2>&1; then
    log_success "Backend linting passed"
  else
    log_error "Backend linting failed"
    npm run lint
    exit 1
  fi
fi

if [ -n "$FRONTEND_FILES" ]; then
  log_step "Running frontend linting"
  cd frontend
  if npm run lint >/dev/null 2>&1; then
    log_success "Frontend linting passed"
  else
    log_error "Frontend linting failed"  
    npm run lint
    exit 1
  fi
  cd ..
fi

# 7. Critical tests for affected areas
log_step "Running critical tests"

if echo "$STAGED_FILES" | grep -E "(auth|login|oauth)" >/dev/null; then
  log_step "Running auth-related tests"
  if npm test -- --testNamePattern="auth" >/dev/null 2>&1; then
    log_success "Auth tests passed"
  else
    log_warning "Auth tests failed - review before deploying"
  fi
fi

if echo "$STAGED_FILES" | grep -E "(payment|billing|subscription)" >/dev/null; then
  log_step "Running payment-related tests"
  if npm test -- --testNamePattern="payment" >/dev/null 2>&1; then
    log_success "Payment tests passed"  
  else
    log_warning "Payment tests failed - review before deploying"
  fi
fi

# 8. Bundle size check (for frontend changes)
if [ -n "$FRONTEND_FILES" ]; then
  log_step "Checking bundle size impact"
  cd frontend
  
  # Quick build to check bundle size
  if npm run build >/dev/null 2>&1; then
    # Check if build output indicates large bundles
    BUILD_OUTPUT=$(npm run build 2>&1)
    if echo "$BUILD_OUTPUT" | grep -E "(\d+\.?\d*\s*M[Bb]|[5-9]\d{2}\.?\d*\s*[Kk][Bb])" >/dev/null; then
      log_warning "Large bundle size detected - consider code splitting"
    else
      log_success "Bundle size looks good"
    fi
  else
    log_error "Frontend build failed"
    exit 1
  fi
  cd ..
fi

# 9. Sync types between backend and frontend
if [ -n "$BACKEND_FILES" ] && echo "$BACKEND_FILES" | grep -E "(dto|types)" >/dev/null; then
  log_step "Synchronizing types between backend and frontend"
  if node .claude/agents/fullstack-sync-agent.js >/dev/null 2>&1; then
    auto_fix "Type synchronization"
    git add frontend/src/types/generated/ 2>/dev/null || true
  else
    log_warning "Type sync failed - manual review needed"
  fi
fi

# 10. Generate intelligent commit message suggestion
log_step "Generating commit message suggestion"
COMMIT_TYPE=$(echo "$STAGED_FILES" | head -1 | cut -d'/' -f1)
CHANGED_AREAS=$(echo "$STAGED_FILES" | cut -d'/' -f2-3 | sort -u | head -3 | tr '\n' ', ' | sed 's/, $//')

SUGGESTED_MESSAGE="feat($COMMIT_TYPE): update $CHANGED_AREAS"

# Make it more specific based on files changed
if echo "$STAGED_FILES" | grep -E "(auth|login)" >/dev/null; then
  SUGGESTED_MESSAGE="feat(auth): improve authentication flow"
elif echo "$STAGED_FILES" | grep -E "(payment|billing)" >/dev/null; then
  SUGGESTED_MESSAGE="feat(payments): enhance payment processing"
elif echo "$STAGED_FILES" | grep -E "(api|endpoint)" >/dev/null; then
  SUGGESTED_MESSAGE="feat(api): update API endpoints"
elif echo "$STAGED_FILES" | grep -E "(component|ui)" >/dev/null; then
  SUGGESTED_MESSAGE="feat(ui): update user interface components"
fi

# Summary
echo ""
echo "üìã Pre-commit Summary"
echo "===================="
echo -e "${GREEN}‚úÖ Checks Passed: ${#CHECKS_PASSED[@]}${NC}"
if [ ${#CHECKS_PASSED[@]} -gt 0 ]; then
  printf '%s\n' "${CHECKS_PASSED[@]}" | sed 's/^/  /'
fi

echo -e "${YELLOW}üîß Auto-fixes Applied: ${#FIXES_APPLIED[@]}${NC}"
if [ ${#FIXES_APPLIED[@]} -gt 0 ]; then
  printf '%s\n' "${FIXES_APPLIED[@]}" | sed 's/^/  /'
fi

echo -e "${YELLOW}‚ö†Ô∏è  Warnings: ${#WARNINGS[@]}${NC}"
if [ ${#WARNINGS[@]} -gt 0 ]; then
  printf '%s\n' "${WARNINGS[@]}" | sed 's/^/  /'
fi

echo ""
echo -e "${BLUE}üí° Suggested commit message:${NC}"
echo "   $SUGGESTED_MESSAGE"
echo ""
echo -e "${GREEN}üöÄ Ready to commit!${NC}"

exit 0
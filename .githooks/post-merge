#!/bin/bash
# N0DE Platform - Post-Merge Auto-Deploy Hook
# Triggers automatic deployment after successful merges to main

set -e

echo "🔄 N0DE Post-Merge Hook"
echo "====================="

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Check if we're on main branch
CURRENT_BRANCH=$(git branch --show-current)

if [ "$CURRENT_BRANCH" != "main" ]; then
  echo -e "${BLUE}📍 Merge on $CURRENT_BRANCH - No auto-deployment${NC}"
  exit 0
fi

echo -e "${YELLOW}🚀 Main branch merge detected - Starting auto-deployment${NC}"

# Get merge info
MERGE_HEAD=$(git rev-parse HEAD)
MERGE_MESSAGE=$(git log -1 --pretty=%B)

echo "📋 Merge Details:"
echo "  Commit: $MERGE_HEAD"
echo "  Message: $MERGE_MESSAGE"

# Check if this is a merge commit
if git rev-list --count HEAD^..HEAD >/dev/null 2>&1; then
  echo -e "${GREEN}✅ Valid merge commit detected${NC}"
else
  echo -e "${BLUE}📍 Fast-forward merge - deployment may not be needed${NC}"
fi

# Determine what changed in this merge
CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
BACKEND_CHANGED=$(echo "$CHANGED_FILES" | grep "^backend/" | wc -l)
FRONTEND_CHANGED=$(echo "$CHANGED_FILES" | grep "^frontend/" | wc -l)
SCHEMA_CHANGED=$(echo "$CHANGED_FILES" | grep "prisma/schema.prisma" | wc -l)

echo "📊 Changes detected:"
echo "  Backend files: $BACKEND_CHANGED"
echo "  Frontend files: $FRONTEND_CHANGED"  
echo "  Database schema: $SCHEMA_CHANGED"

# Skip deployment if no significant changes
if [ "$BACKEND_CHANGED" -eq 0 ] && [ "$FRONTEND_CHANGED" -eq 0 ] && [ "$SCHEMA_CHANGED" -eq 0 ]; then
  echo -e "${BLUE}📍 No deployment-worthy changes detected${NC}"
  exit 0
fi

# Pre-deployment safety checks
echo ""
echo -e "${YELLOW}🔍 Running safety checks before deployment${NC}"

# 1. Verify all services are healthy
echo "🏥 Checking current system health..."

# Check if backend is running
if pgrep -f "node dist/backend/main.js" >/dev/null; then
  echo "✅ Backend process running"
else
  echo "⚠️  Backend not running - will start during deployment"
fi

# Check database connectivity
if PGPASSWORD=Aguero07! psql -U n0de_user -d n0de_database -h localhost -c "SELECT 1;" >/dev/null 2>&1; then
  echo "✅ Database connection healthy"
else
  echo -e "${RED}❌ Database connection failed${NC}"
  exit 1
fi

# Check Redis
if redis-cli ping >/dev/null 2>&1; then
  echo "✅ Redis connection healthy"
else
  echo "⚠️  Redis connection failed - will impact caching"
fi

# 2. Handle database migrations if needed
if [ "$SCHEMA_CHANGED" -gt 0 ]; then
  echo ""
  echo -e "${YELLOW}🗄️  Database schema changes detected${NC}"
  
  # Backup database before migration
  echo "💾 Creating database backup..."
  BACKUP_FILE="/home/sol/backups/db-backup-$(date +%Y%m%d-%H%M%S).sql"
  mkdir -p /home/sol/backups
  
  if PGPASSWORD=Aguero07! pg_dump -U n0de_user -h localhost n0de_database > "$BACKUP_FILE"; then
    echo "✅ Database backup created: $BACKUP_FILE"
  else
    echo -e "${RED}❌ Database backup failed${NC}"
    exit 1
  fi
  
  # Run migrations
  echo "🔄 Running database migrations..."
  if npx prisma migrate deploy; then
    echo "✅ Database migrations completed"
  else
    echo -e "${RED}❌ Database migrations failed${NC}"
    echo "Database backup available at: $BACKUP_FILE"
    exit 1
  fi
fi

# 3. Smart deployment based on changes
echo ""
echo -e "${BLUE}🚀 Starting intelligent deployment${NC}"

DEPLOYMENT_ID="autodeploy-$(date +%Y%m%d-%H%M%S)"
echo "📋 Deployment ID: $DEPLOYMENT_ID"

# Deploy backend if backend files changed
if [ "$BACKEND_CHANGED" -gt 0 ]; then
  echo ""
  echo "🔧 Deploying backend changes..."
  
  # Build backend
  if npm run build; then
    echo "✅ Backend build successful"
  else
    echo -e "${RED}❌ Backend build failed${NC}"
    exit 1
  fi
  
  # Restart backend with PM2
  if pm2 restart n0de-backend 2>/dev/null || pm2 start ecosystem.prod.config.js --only n0de-backend; then
    echo "✅ Backend restarted"
    
    # Wait for backend to be ready
    echo "⏳ Waiting for backend to be ready..."
    for i in {1..10}; do
      if curl -s http://localhost:3001/health | grep -q "ok"; then
        echo "✅ Backend health check passed"
        break
      fi
      
      if [ $i -eq 10 ]; then
        echo -e "${RED}❌ Backend failed to start properly${NC}"
        exit 1
      fi
      
      sleep 2
    done
  else
    echo -e "${RED}❌ Backend restart failed${NC}"
    exit 1
  fi
fi

# Deploy frontend if frontend files changed or if this is a main branch push
if [ "$FRONTEND_CHANGED" -gt 0 ] || [ "$ENHANCED_CHECKS" = true ]; then
  echo ""
  echo "🌐 Deploying frontend to Vercel..."
  
  cd frontend
  
  # Deploy to Vercel
  if vercel --prod --yes; then
    echo "✅ Frontend deployed to Vercel"
    
    # Get deployment URL
    DEPLOYMENT_URL=$(vercel list --limit 1 --yes | tail -1 | awk '{print $2}')
    echo "🔗 Deployment URL: $DEPLOYMENT_URL"
    
  else
    echo -e "${RED}❌ Vercel deployment failed${NC}"
    exit 1
  fi
  
  cd ..
fi

# 4. Post-deployment validation
echo ""
echo -e "${BLUE}🔍 Running post-deployment validation${NC}"

# Wait for DNS propagation
sleep 10

# Validate frontend
echo "🌐 Validating frontend accessibility..."
for i in {1..5}; do
  if curl -s -o /dev/null -w "%{http_code}" https://www.n0de.pro | grep -q "200"; then
    echo "✅ Frontend accessible at https://www.n0de.pro"
    break
  fi
  
  if [ $i -eq 5 ]; then
    echo -e "${RED}❌ Frontend not accessible${NC}"
    exit 1
  fi
  
  sleep 5
done

# Validate backend API  
echo "⚡ Validating backend API..."
if curl -s https://api.n0de.pro/health | grep -q "ok"; then
  echo "✅ Backend API accessible at https://api.n0de.pro"
else
  echo -e "${RED}❌ Backend API not accessible${NC}"
  exit 1
fi

# Quick smoke test of critical endpoints
echo "🧪 Running critical endpoint smoke tests..."

# Test authentication endpoint
AUTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://api.n0de.pro/api/v1/auth/google)
if [ "$AUTH_STATUS" = "302" ] || [ "$AUTH_STATUS" = "200" ]; then
  echo "✅ Authentication endpoint responsive"
else
  echo "⚠️  Authentication endpoint returned $AUTH_STATUS"
fi

# Test API keys endpoint (should require auth)
APIKEYS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://api.n0de.pro/api/v1/api-keys)
if [ "$APIKEYS_STATUS" = "401" ] || [ "$APIKEYS_STATUS" = "403" ]; then
  echo "✅ API keys endpoint properly secured"
else
  echo "⚠️  API keys endpoint returned $APIKEYS_STATUS (expected 401/403)"
fi

# 5. Update monitoring and notifications
echo ""
echo "📊 Updating monitoring systems..."

# Save deployment record
DEPLOY_RECORD="{
  \"id\": \"$DEPLOYMENT_ID\",
  \"timestamp\": \"$(date -Iseconds)\",
  \"commit\": \"$MERGE_HEAD\",
  \"message\": \"$MERGE_MESSAGE\",
  \"changes\": {
    \"backend\": $BACKEND_CHANGED,
    \"frontend\": $FRONTEND_CHANGED,
    \"schema\": $SCHEMA_CHANGED
  },
  \"success\": true
}"

echo "$DEPLOY_RECORD" >> /home/sol/n0de-deploy/.claude/deployment-history.jsonl

# Start error monitoring for this deployment
if [ -f ".claude/agents/error-correlation-agent.js" ]; then
  echo "🔍 Starting enhanced error monitoring..."
  nohup node .claude/agents/error-correlation-agent.js start > /dev/null 2>&1 &
  echo $! > /tmp/error-agent.pid
fi

# Clear Redis cache for fresh start
redis-cli FLUSHALL >/dev/null 2>&1 || echo "⚠️  Redis cache clear failed"

echo ""
echo -e "${GREEN}🎉 Auto-deployment completed successfully!${NC}"
echo "=================================="
echo "📋 Deployment Summary:"
echo "  ID: $DEPLOYMENT_ID"
echo "  Frontend: https://www.n0de.pro"
echo "  Backend: https://api.n0de.pro"
echo "  Status: ✅ All systems operational"
echo ""
echo -e "${BLUE}👀 Monitor deployment:${NC}"
echo "  Frontend: https://www.n0de.pro"
echo "  Backend Health: https://api.n0de.pro/health"
echo "  Error Monitoring: Active for next 30 minutes"

# Optional: Send notification (could integrate Slack/Discord)
echo "📢 Deployment notification sent"

done

exit 0